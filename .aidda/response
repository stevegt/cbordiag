<think>
Okay, I need to update the Go code for the cbordiag tool as per the user's instructions. Let me start by understanding the changes required. The user wants to add an Annotate function that creates a parser, calls it, and returns the annotated output. Then, update all the existing code to use this Annotate function instead of directly using the parser.

First, looking at the cbordiag.go file. The CborParser struct is already there, so I need to create a new function Annotate that takes a byte slice, initializes the parser, parses, and returns the lines. That should be straightforward. I'll add the Annotate function, probably as a package-level function, since it's a convenience function.

Next, the tests in cbordiag_test.go. The existing tests are for individual methods like parseUint and parseItem. I need to add a test for the new Annotate function. Maybe a simple test case that checks the output format when Annotate is called.

Then, the examples. In examples/simple/main.go, they're currently initializing the parser and calling Parse. I need to replace that with a call to Annotate. Similarly, in cmd/cbordiag/main.go, the parser is created and Parse is called. That should be replaced with Annotate. Let me check how that code works. For the example, just pass the data to Annotate and get the lines. Same for the command-line tool.

The README.md has a section showing library usage. That example uses the parser directly, so I need to update it to use Annotate instead. That example should become simpler, just calling Annotate(data) and then printing the lines.

I should also check that all references to the parser's Parse method are replaced with Annotate. The Annotate function should handle creating the parser instance, setting the initial offset and depth, and then calling Parse on it. So the Annotate function would look like this: 

func Annotate(data []byte) []string {
    parser := &CborParser{Data: data}
    return parser.Parse()
}

Wait, but the existing Parse method starts at Offset 0, and the parser's initial Offset is set to 0, so that's correct. So the Annotate function can just create the parser with Data: data, Offset: 0, Depth: 0, and call Parse.

Wait, looking at the current code: the Parse method loops while Offset is less than len(Data), but each ParseItem starts at the current Offset. So for Annotate to parse the entire data, initializing the parser with Offset: 0 and Depth: 0 is correct.

So adding the Annotate function in cbordiag.go:

func Annotate(data []byte) []string {
    parser := &CborParser{
        Data:   data,
        Offset: 0,
        Depth:  0,
    }
    return parser.Parse()
}

Then, in cbordiag_test.go, I'll add a TestAnnotate function. Let's think of a test case. For example, passing a simple CBOR array and checking the output lines. Maybe similar to the existing TestParseItem but using Annotate instead.

Now, updating the examples/simple/main.go. Currently, they create a parser, then call Parse. Replace that with diagnostics := cbordiag.Annotate(data). Same for the cmd/cbordiag/main.go: instead of creating a parser, just call Annotate(data) and join the output.

In the README.md's library usage example, replace the parser setup with a call to Annotate. The example would become:

data := []byte{0x83, 0x01, 0x02, 0x03}
diagnostics := cbordiag.Annotate(data)

That's much simpler.

Checking if there are any other places that need updating. Looks like the main change is to replace manual parser initialization and Parse() calls with Annotate.

Also, in cbordiag.go, the Annotate function should be added at the top level of the package, maybe after the CborParser struct definition.

Testing: Make sure that after these changes, the code still compiles and the tests pass. The existing tests might need to be adjusted if they rely on internal methods, but since Annotate is a new function, existing tests shouldn't be affected except for the new test case.

Now, let's go through each file step by step.

Starting with cbordiag.go. Adding the Annotate function. Place it perhaps after the CborParser struct definition or at the end of the file. Since it's a package-level function, maybe after the struct.

In cbordiag_test.go, add a new test function TestAnnotate. For example:

func TestAnnotate(t *testing.T) {
    data := []byte{0x83, 0x01, 0x02, 0x03}
    expected := []string{
        "83                   # ARRAY (3 items)",
        "    01                   # POS INT: 1",
        "    02                   # POS INT: 2",
        "    03                   # POS INT: 3",
    }
    result := Annotate(data)
    if !compareLines(result, expected) {
        t.Errorf("Annotate() mismatch")
    }
}

That should cover the new function.

Updating cmd/cbordiag/main.go: the current code creates a parser and calls Parse. Replace that with output := strings.Join(cbordiag.Annotate(data), "\n").

In examples/simple/main.go: same replacement. Use cbordiag.Annotate(data) directly.

In the README.md, update the library usage example to use Annotate.

Let me check the current example in the README:

parser := &cbordiag.CborParser{ ... }
diagnostics := parser.Parse()

Replace that with:

diagnostics := cbordiag.Annotate(data)

So the example becomes simpler.

Now, ensuring that all these files are updated correctly, and that the Annotate function is properly added. Also, making sure that all references to the parser's Parse method are replaced with Annotate where appropriate.

Another thing: the Annotate function should be exported, so it starts with a capital letter. Yes.

In the command-line tool, after reading data, they can just call Annotate(data) and get the lines.

Testing all the changes to ensure that they don't introduce syntax errors. For instance, in the examples and cmd, after replacing the parser code with Annotate, the code should compile.

Also, checking the imports. In the examples and cmd, they import "github.com/stevegt/cbordiag", which is correct.

Finally, making sure that the Annotate function is documented if necessary, but the user didn't mention adding comments, so perhaps that's not required.

Now, implementing these changes in each file.
</think>

File: /home/stevegt/lab/cbordiag/README.md
```markdown
# CBOR Diagnostic Tool

A Go implementation for parsing CBOR (Concise Binary Object Representation) data and generating annotated diagnostic output with nested structure visualization.

## Features

- Detailed annotation of CBOR data types and values
- Recursive parsing of nested structures (arrays/maps/tags)
- Error detection for truncated data
- Printable detection for byte strings
- Standard compliance with RFC 8949 specifications

## Quickstart

### Installation
```bash
go install github.com/stevegt/cbordiag/cmd/cbordiag@latest
```

### CLI Usage
Process CBOR data from stdin:
```bash
# Process hex-encoded CBOR input
echo -n "8301020382040f" | xxd -r -p | cbordiag

# Process raw CBOR file
cbordiag < data.cbor
```

Sample output for `echo -n "8301020382040f" | xxd -r -p | cbordiag`:
```
83                   # ARRAY (3 items)
    01                   # POS INT: 1
    02                   # POS INT: 2
    03                   # POS INT: 3
82040F              # ARRAY (2 items)
    04                   # POS INT: 4
    0F                   # POS INT: 15
```

### Library Usage
```go
package main

import (
    "fmt"
    "github.com/stevegt/cbordiag"
)

func main() {
    data := []byte{0x83, 0x01, 0x02, 0x03} // CBOR array [1,2,3]
    diagnostics := cbordiag.Annotate(data)
    for _, line := range diagnostics {
        fmt.Println(line)
    }
    
    // Output:
    // 83                   # ARRAY (3 items)
    //     01                   # POS INT: 1
    //     02                   # POS INT: 2
    //     03                   # POS INT: 3
}
```

## Diagnostic Format
Each line follows this structure:
```
<HEX BYTES>         # <TYPE ANNOTATION> [(<DETAILS>)]
```
- **Hex Bytes**: Raw CBOR bytes in uppercase hex
- **Type Annotation**: CBOR major type and value details
- **Indentation**: 4 spaces per nesting level
- **Error Handling**: Truncated data marked with `ERROR`

## Testing
Run comprehensive tests:
```bash
go test -v ./...
```

## References
- RFC 8949: Concise Binary Object Representation (CBOR)

```
EOF_/home/stevegt/lab/cbordiag/README.md

File: /home/stevegt/lab/cbordiag/examples/simple/main.go
```go
package main

import (
	"fmt"

	"github.com/stevegt/cbordiag"
)

func main() {
	data := []byte{0x83, 0x01, 0x02, 0x03} // CBOR array [1,2,3]
	diagnostics := cbordiag.Annotate(data)
	for _, line := range diagnostics {
		fmt.Println(line)
	}

	// Output:
	// 83                   # ARRAY (3 items)
	//     01                   # POS INT: 1
	//     02                   # POS INT: 2
	//     03                   # POS INT: 3
}
```
EOF_/home/stevegt/lab/cbordiag/examples/simple/main.go

File: /home/stevegt/lab/cbordiag/cmd/cbordiag/main.go
```go
package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/stevegt/cbordiag"
)

// main reads CBOR data from stdin and outputs annotated diagnostic format
func main() {
	reader := bufio.NewReader(os.Stdin)
	data, err := io.ReadAll(reader)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error reading input: %v\n", err)
		os.Exit(1)
	}

	if len(data) == 0 {
		fmt.Println("No input data")
		os.Exit(1)
	}

	// Parse entire input and join output lines
	output := strings.Join(cbordiag.Annotate(data), "\n")
	fmt.Println(output)
}
```
EOF_/home/stevegt/lab/cbordiag/cmd/cbordiag/main.go

File: /home/stevegt/lab/cbordiag/cbordiag.go
```go
package cbordiag

import (
	"encoding/hex"
	"fmt"
	"strings"
	"unicode"
)

// CborParser maintains state for parsing CBOR data and generating diagnostics
type CborParser struct {
	Data   []byte // Input CBOR data
	Offset int    // Current read position in Data
	Depth  int    // Current nesting depth for indentation
}

// Annotate converts CBOR data to annotated diagnostic format
func Annotate(data []byte) []string {
	parser := &CborParser{
		Data:   data,
		Offset: 0,
		Depth:  0,
	}
	return parser.Parse()
}

// Parse processes all CBOR items starting at current offset and returns
// formatted diagnostic lines with proper indentation and annotations
func (p *CborParser) Parse() []string {
	var lines []string
	for p.Offset < len(p.Data) {
		lines = append(lines, p.ParseItem()...)
	}
	return lines
}

// ParseItem parses a single CBOR item starting at current offset and returns
// the formatted diagnostic lines with proper indentation. Handles nested
// structures by recursively parsing contained items.
func (p *CborParser) ParseItem() []string {
	if p.Offset >= len(p.Data) {
		return []string{}
	}

	startOffset := p.Offset
	initial := p.Data[p.Offset]
	p.Offset++
	major := initial >> 5  // Extract major type (high 3 bits)
	info := initial & 0x1F // Extract additional info (low 5 bits)

	var lines []string
	var annotation, value string
	var length int

	// errorLine generates an error message with truncated hex prefix
	errorLine := func(msg string, args ...interface{}) []string {
		prefixBytes := p.Data[startOffset:]
		if len(prefixBytes) > 4 { // Truncate long prefixes for errors
			prefixBytes = prefixBytes[:4]
		}
		prefix := strings.ToUpper(hex.EncodeToString(prefixBytes))
		indent := strings.Repeat("    ", p.Depth)
		errMsg := fmt.Sprintf(msg, args...)
		return []string{fmt.Sprintf("%s%-20s # ERROR: %s", indent, prefix, errMsg)}
	}

	// Handle major types according to CBOR specification
	switch major {
	case 0: // Unsigned integer (RFC 8949 Section 3.1)
		val := p.parseUint(info)
		annotation = fmt.Sprintf("POS INT: %d", val)
	case 1: // Negative integer (RFC 8949 Section 3.1)
		val := p.parseNint(info)
		annotation = fmt.Sprintf("NEG INT: %d", val)
	case 2: // Byte string (RFC 8949 Section 3.2.1)
		length = p.parseLength(info)
		if p.Offset+length > len(p.Data) {
			return errorLine("truncated byte string (need %d bytes)", length)
		}
		bytes := p.Data[p.Offset : p.Offset+length]
		p.Offset += length
		if isPrintable(bytes) {
			value = fmt.Sprintf("'%s'", bytes)
		} else {
			value = fmt.Sprintf("h'%x'", bytes)
		}
		annotation = fmt.Sprintf("BYTE STR: %s (%d %s)", 
			value, length, pluralize(length, "byte", "bytes"))
	case 3: // Text string (RFC 8949 Section 3.2.1)
		length = p.parseLength(info)
		if p.Offset+length > len(p.Data) {
			return errorLine("truncated text string (need %d bytes)", length)
		}
		str := string(p.Data[p.Offset : p.Offset+length])
		p.Offset += length
		annotation = fmt.Sprintf("TEXT: %q (%d %s)", 
			str, length, pluralize(length, "byte", "bytes"))
	case 4: // Array (RFC 8949 Section 3.2.2)
		length = p.parseLength(info)
		annotation = fmt.Sprintf("ARRAY (%d %s)", 
			length, pluralize(length, "item", "items"))
	case 5: // Map (RFC 8949 Section 3.2.3)
		length = p.parseLength(info)
		annotation = fmt.Sprintf("MAP (%d %s)", 
			length, pluralize(length, "pair", "pairs"))
	case 6: // Tag (RFC 8949 Section 3.4)
		tag := p.parseUint(info)
		annotation = fmt.Sprintf("TAG (%d)", tag)
	case 7: // Special values (RFC 8949 Section 3.3)
		if info < 20 {
			annotation = fmt.Sprintf("SIMPLE: %d", info)
		} else {
			annotation = "SIMPLE (RESERVED)"
		}
	}

	// Generate prefix from consumed bytes
	prefixBytes := p.Data[startOffset:p.Offset]
	prefix := strings.ToUpper(hex.EncodeToString(prefixBytes))
	indent := strings.Repeat("    ", p.Depth)
	lines = append(lines, fmt.Sprintf("%s%-20s # %s", indent, prefix, annotation))

	// Process nested structures recursively
	if major == 4 || major == 5 || major == 6 {
		p.Depth++
		defer func() { p.Depth-- }()

		switch major {
		case 4: // Array elements
			for i := 0; i < length; i++ {
				if p.Offset >= len(p.Data) {
					lines = append(lines, errorLine("truncated array")...)
					break
				}
				lines = append(lines, p.ParseItem()...)
			}
		case 5: // Map key-value pairs
			for i := 0; i < length*2; i++ {
				if p.Offset >= len(p.Data) {
					lines = append(lines, errorLine("truncated map")...)
					break
				}
				lines = append(lines, p.ParseItem()...)
			}
		case 6: // Tagged item
			if p.Offset < len(p.Data) {
				lines = append(lines, p.ParseItem()...)
			}
		}
	}

	return lines
}

// parseUint decodes CBOR unsigned integers with error checking
func (p *CborParser) parseUint(info byte) uint64 {
	if info < 24 { // Direct value (RFC 8949 Section 3.1)
		return uint64(info)
	}
	
	var val uint64
	switch info {
	case 24: // 1-byte value
		if p.Offset+1 > len(p.Data) {
			return 0
		}
		val = uint64(p.Data[p.Offset])
		p.Offset++
	case 25: // 2-byte value
		if p.Offset+2 > len(p.Data) {
			return 0
		}
		val = uint64(p.Data[p.Offset])<<8 | uint64(p.Data[p.Offset+1])
		p.Offset += 2
	case 26: // 4-byte value
		if p.Offset+4 > len(p.Data) {
			return 0
		}
		val = uint64(p.Data[p.Offset])<<24 | uint64(p.Data[p.Offset+1])<<16 |
			uint64(p.Data[p.Offset+2])<<8 | uint64(p.Data[p.Offset+3])
		p.Offset += 4
	case 27: // 8-byte value
		if p.Offset+8 > len(p.Data) {
			return 0
		}
		val = uint64(p.Data[p.Offset])<<56 | uint64(p.Data[p.Offset+1])<<48 |
			uint64(p.Data[p.Offset+2])<<40 | uint64(p.Data[p.Offset+3])<<32 |
			uint64(p.Data[p.Offset+4])<<24 | uint64(p.Data[p.Offset+5])<<16 |
			uint64(p.Data[p.Offset+6])<<8 | uint64(p.Data[p.Offset+7])
		p.Offset += 8
	}
	return val
}

// parseNint calculates negative integers using n = -1 - val encoding
func (p *CborParser) parseNint(info byte) int64 {
	return -1 - int64(p.parseUint(info))
}

// parseLength decodes length values for CBOR data structures
func (p *CborParser) parseLength(info byte) int {
	if info < 24 { // Direct length
		return int(info)
	}

	var length int
	switch info {
	case 24: // 1-byte length
		if p.Offset+1 > len(p.Data) {
			return 0
		}
		length = int(p.Data[p.Offset])
		p.Offset++
	case 25: // 2-byte length
		if p.Offset+2 > len(p.Data) {
			return 0
		}
		length = int(p.Data[p.Offset])<<8 | int(p.Data[p.Offset+1])
		p.Offset += 2
	case 26: // 4-byte length
		if p.Offset+4 > len(p.Data) {
			return 0
		}
		length = int(p.Data[p.Offset])<<24 | int(p.Data[p.Offset+1])<<16 |
			int(p.Data[p.Offset+2])<<8 | int(p.Data[p.Offset+3])
		p.Offset += 4
	case 27: // 8-byte length
		if p.Offset+8 > len(p.Data) {
			return 0
		}
		length = int(uint64(p.Data[p.Offset])<<56 | uint64(p.Data[p.Offset+1])<<48 |
			uint64(p.Data[p.Offset+2])<<40 | uint64(p.Data[p.Offset+3])<<32 |
			uint64(p.Data[p.Offset+4])<<24 | uint64(p.Data[p.Offset+5])<<16 |
			uint64(p.Data[p.Offset+6])<<8 | uint64(p.Data[p.Offset+7]))
		p.Offset += 8
	}
	return length
}

// isPrintable checks if bytes contain only printable ASCII characters
func isPrintable(b []byte) bool {
	for _, c := range b {
		if c > unicode.MaxASCII || !unicode.IsPrint(rune(c)) {
			return false
		}
	}
	return true
}

// pluralize returns singular or plural form based on count
func pluralize(n int, singular, plural string) string {
	if n == 1 {
		return singular
	}
	return plural
}
```
EOF_/home/stevegt/lab/cbordiag/cbordiag.go

File: /home/stevegt/lab/cbordiag/cbordiag_test.go
```go
package cbordiag

import (
	"encoding/hex"
	"strings"
	"testing"
)

func TestAnnotate(t *testing.T) {
	data := hexDecode("83010203")
	expected := []string{
		"83                   # ARRAY (3 items)",
		"    01                   # POS INT: 1",
		"    02                   # POS INT: 2",
		"    03                   # POS INT: 3",
	}
	result := Annotate(data)
	if !compareLines(result, expected) {
		t.Errorf("Annotate() mismatch\nGot:\n%s\nWant:\n%s",
			strings.Join(result, "\n"),
			strings.Join(expected, "\n"))
	}
}

func TestParseUint(t *testing.T) {
	tests := []struct {
		name     string
		data     []byte
		info     byte
		expected uint64
		offset   int
	}{
		{"Direct value", []byte{}, 0x17, 23, 0},
		{"1-byte", []byte{0x2A}, 24, 42, 1},
		{"2-byte", []byte{0x01, 0x00}, 25, 256, 2},
		{"4-byte", []byte{0x00, 0x01, 0x00, 0x00}, 26, 65536, 4},
		{"8-byte", []byte{0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00}, 27, 4294967296, 8},
		{"Max 8-byte", []byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, 27, 18446744073709551615, 8},
		{"Truncated 1-byte", []byte{}, 24, 0, 0},
		{"Truncated 2-byte", []byte{0x01}, 25, 0, 0},
		{"Truncated 4-byte", []byte{0x00, 0x01, 0x00}, 26, 0, 0},
		{"Truncated 8-byte", []byte{0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 27, 0, 0},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			p := &CborParser{Data: tt.data}
			result := p.parseUint(tt.info)
			if result != tt.expected || p.Offset != tt.offset {
				t.Errorf("parseUint(%x) = %d (offset %d), want %d (offset %d)",
					tt.info, result, p.Offset, tt.expected, tt.offset)
			}
		})
	}
}

func TestParseNint(t *testing.T) {
	tests := []struct {
		name     string
		data     []byte
		info     byte
		expected int64
	}{
		{"Direct value", []byte{}, 0x13, -20},
		{"1-byte", []byte{0x2A}, 24, -43},
		{"2-byte", []byte{0x01, 0x00}, 25, -257},
		{"4-byte", []byte{0x00, 0x01, 0x00, 0x00}, 26, -65537},
		{"8-byte", []byte{0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00}, 27, -4294967297},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			p := &CborParser{Data: tt.data}
			result := p.parseNint(tt.info)
			if result != tt.expected {
				t.Errorf("parseNint(%x) = %d, want %d", tt.info, result, tt.expected)
			}
		})
	}
}

func TestParseLength(t *testing.T) {
	tests := []struct {
		name     string
		data     []byte
		info     byte
		expected int
		offset   int
	}{
		{"Direct length", []byte{}, 0x05, 5, 0},
		{"1-byte", []byte{0x20}, 24, 32, 1},
		{"2-byte", []byte{0x03, 0xE8}, 25, 1000, 2},
		{"4-byte", []byte{0x00, 0x0F, 0x42, 0x40}, 26, 1000000, 4},
		{"8-byte", []byte{0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00}, 27, 4294967296, 8},
		{"Truncated 1-byte", []byte{}, 24, 0, 0},
		{"Truncated 2-byte", []byte{0x03}, 25, 0, 0},
		{"Truncated 4-byte", []byte{0x00, 0x0F, 0x42}, 26, 0, 0},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			p := &CborParser{Data: tt.data}
			result := p.parseLength(tt.info)
			if result != tt.expected || p.Offset != tt.offset {
				t.Errorf("parseLength(%x) = %d (offset %d), want %d (offset %d)",
					tt.info, result, p.Offset, tt.expected, tt.offset)
			}
		})
	}
}

func TestIsPrintable(t *testing.T) {
	tests := []struct {
		input    []byte
		expected bool
	}{
		{[]byte("Hello"), true},
		{[]byte{0x01, 0x02}, false},
		{[]byte("123\n"), false},    // Contains control character
		{[]byte("cafe"), true},
		{[]byte{0x80, 0x81}, false}, // Non-ASCII bytes
		{[]byte("π"), false},        // UTF-8 multi-byte character
	}

	for _, tt := range tests {
		t.Run(string(tt.input), func(t *testing.T) {
			result := isPrintable(tt.input)
			if result != tt.expected {
				t.Errorf("isPrintable(%x) = %v, want %v", tt.input, result, tt.expected)
			}
		})
	}
}

func TestParseItem(t *testing.T) {
	tests := []struct {
		name     string
		data     []byte
		expected []string
	}{
		{
			"Simple array",
			[]byte{0x83, 0x01, 0x02, 0x03},
			[]string{
				"83                   # ARRAY (3 items)",
				"    01                   # POS INT: 1",
				"    02                   # POS INT: 2",
				"    03                   # POS INT: 3",
			},
		},
		{
			"Nested map",
			hexDecode("a26161016162820203"),
			[]string{
				"A2                   # MAP (2 pairs)",
				"    6161                 # TEXT: \"a\" (1 byte)",
				"    01                   # POS INT: 1",
				"    6162                 # TEXT: \"b\" (1 byte)",
				"    82                   # ARRAY (2 items)",
				"        02                   # POS INT: 2",
				"        03                   # POS INT: 3",
			},
		},
		{
			"Tagged item",
			hexDecode("d8256747656e65726963"),
			[]string{
				"D825                 # TAG (37)",
				"    6747656E65726963     # TEXT: \"Generic\" (7 bytes)",
			},
		},
		{
			"Truncated byte string",
			hexDecode("42"), // Length 2 but no data
			[]string{
				"42                   # ERROR: truncated byte string (need 2 bytes)",
			},
		},
		{
			"Printable byte string",
			hexDecode("4568656c6c6f"),
			[]string{
				"4568656C6C6F         # BYTE STR: 'hello' (5 bytes)",
			},
		},
		{
			"Non-printable byte string",
			hexDecode("4401020304"),
			[]string{
				"4401020304           # BYTE STR: h'01020304' (4 bytes)",
			},
		},
		{
			"Special values",
			hexDecode("f4"),
			[]string{
				"F4                   # SIMPLE (RESERVED)",
			},
		},
		{
			"Truncated text string",
			hexDecode("634162"),
			[]string{
				"634162               # ERROR: truncated text string (need 3 bytes)",
			},
		},
		{
			"Large unsigned int",
			hexDecode("1bffffffffffffffff"),
			[]string{
				"1BFFFFFFFFFFFFFFFF   # POS INT: 18446744073709551615",
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			p := &CborParser{Data: tt.data, Depth: 0}
			result := p.ParseItem()
			if !compareLines(result, tt.expected) {
				t.Errorf("ParseItem() mismatch\nGot:\n%s\nWant:\n%s",
					strings.Join(result, "\n"),
					strings.Join(tt.expected, "\n"))
			}
		})
	}
}

// hexDecode converts hexadecimal string to byte slice
func hexDecode(s string) []byte {
	data, _ := hex.DecodeString(s)
	return data
}

// compareLines compares line output ignoring trailing whitespace
func compareLines(a, b []string) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		got := strings.TrimRight(a[i], " \t")
		want := strings.TrimRight(b[i], " \t")
		if got != want {
			return false
		}
	}
	return true
}
```
EOF_/home/stevegt/lab/cbordiag/cbordiag_test.go

<references>
</references>
